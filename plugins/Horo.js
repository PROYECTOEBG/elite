import fetch from 'node-fetch';

// Cache para llevar registro de im√°genes usadas
const imageCache = new Map();

let handler = async (m, { conn, args, usedPrefix, command }) => {
    const signos = {
        'aries': '‚ôà Aries',
        'tauro': '‚ôâ Tauro',
        'geminis': '‚ôä G√©minis',
        'cancer': '‚ôã C√°ncer', 
        'leo': '‚ôå Leo',
        'virgo': '‚ôç Virgo',
        'libra': '‚ôé Libra',
        'escorpio': '‚ôè Escorpio',
        'sagitario': '‚ôê Sagitario',
        'capricornio': '‚ôë Capricornio',
        'acuario': '‚ôí Acuario',
        'piscis': '‚ôì Piscis'
    };
    
    const signo = args[0]?.toLowerCase();
    
    if (!signo || !signos[signo]) {
        let listaSignos = Object.entries(signos)
            .map(([key, val]) => `‚ñ¢ ${usedPrefix + command} ${key} - ${val}`)
            .join('\n');
        return conn.reply(m.chat, 
            `‚ú® *Hor√≥scopo Disponible*\n\n${listaSignos}\n\nEjemplo: ${usedPrefix + command} cancer`, 
            m
        );
    }
    
    try {
        await conn.sendPresenceUpdate('composing', m.chat);
        
        // Obtener datos del hor√≥scopo
        const horoscopeData = await getHoroscopeData(signo);
        
        // Obtener imagen √∫nica
        const imageUrl = await getUniqueImage(signo);
        
        const message = `*${signos[signo]}*\n` +
                       `üìÖ *Fecha:* ${horoscopeData.date}\n\n` +
                       `üîÆ *Predicci√≥n:*\n${horoscopeData.prediction}\n\n` +
                       `üí´ *Consejo:* ${horoscopeData.advice}\n\n` +
                       `üçÄ *N√∫mero de suerte:* ${horoscopeData.lucky_number}`;
        
        await conn.sendMessage(m.chat, {
            image: { url: imageUrl },
            caption: message,
            mentions: [m.sender]
        }, { quoted: m });
        
    } catch (error) {
        console.error('Error en hor√≥scopo:', error);
        await sendBackupHoroscope(m, conn, signos[signo]);
    }
};

// Funci√≥n para obtener imagen √∫nica
async function getUniqueImage(sign) {
    const cacheKey = `img_${sign}`;
    let attempts = 0;
    let imageUrl;
    
    // Intentar hasta 3 veces obtener una imagen no usada
    while (attempts < 3) {
        try {
            // Usar timestamp para evitar cach√©
            const timestamp = Date.now();
            imageUrl = `https://source.unsplash.com/600x600/?${sign},zodiac,astrology,stars&t=${timestamp}`;
            
            const response = await fetch(imageUrl, { method: 'HEAD' });
            if (response.ok) {
                const finalUrl = response.url;
                
                // Verificar si esta URL no ha sido usada antes
                if (!imageCache.has(finalUrl)) {
                    imageCache.set(finalUrl, true);
                    
                    // Limitar el cache a 50 im√°genes m√°ximo
                    if (imageCache.size > 50) {
                        const [firstKey] = imageCache.keys();
                        imageCache.delete(firstKey);
                    }
                    
                    return finalUrl;
                }
            }
        } catch (e) {
            console.error('Error al verificar imagen:', e);
        }
        attempts++;
    }
    
    // Si falla, devolver imagen por defecto √∫nica
    return `https://source.unsplash.com/600x600/?${sign},universe&t=${Date.now()}`;
}

async function getHoroscopeData(sign) {
    try {
        const response = await fetch(`https://aztro.sameerkumar.website/?sign=${sign}&day=today`, {
            method: 'POST'
        });
        const data = await response.json();
        
        return {
            date: data.current_date,
            prediction: data.description,
            advice: data.mantra || getRandomAdvice(),
            lucky_number: data.lucky_number
        };
        
    } catch (error) {
        console.error('Error al obtener datos:', error);
        return {
            date: new Date().toLocaleDateString(),
            prediction: 'Las estrellas indican que tendr√°s un d√≠a lleno de oportunidades.',
            advice: getRandomAdvice(),
            lucky_number: Math.floor(Math.random() * 10) + 1
        };
    }
}

async function sendBackupHoroscope(m, conn, signoName) {
    const backupMessage = `*${signoName}*\n\n` +
                         `üìÖ Hoy es un d√≠a especial para ti.\n\n` +
                         `‚ú® Las estrellas indican que tendr√°s un d√≠a lleno de oportunidades.\n\n` +
                         `üí´ Consejo: ${getRandomAdvice()}`;
    
    await conn.sendMessage(m.chat, {
        image: { url: `https://source.unsplash.com/600x600/?${signoName.toLowerCase()},universe&t=${Date.now()}` },
        caption: backupMessage
    }, { quoted: m });
}

function getRandomAdvice() {
    const advices = [
        "Conf√≠a en tu intuici√≥n hoy",
        "Es buen d√≠a para tomar decisiones importantes",
        "Evita los conflictos innecesarios",
        "El amor puede llegar cuando menos lo esperes",
        "Cuida tu salud emocional",
        "Un viaje corto podr√≠a ser beneficioso",
        "La paciencia ser√° tu mayor virtud hoy"
    ];
    return advices[Math.floor(Math.random() * advices.length)];
}

handler.help = ['horoscopo <signo>'];
handler.tags = ['fun'];
handler.command = /^(horoscopo|hor√≥scopo|signo)$/i;
handler.limit = true;

export default handler;
