import fetch from 'node-fetch';

// Cache para im√°genes usadas recientemente
const imageCache = new Map();

let handler = async (m, { conn, args, usedPrefix, command }) => {
    const zodiacSigns = {
        'aries': '‚ôà Aries',
        'tauro': '‚ôâ Tauro',
        'geminis': '‚ôä G√©minis',
        'cancer': '‚ôã C√°ncer',
        'leo': '‚ôå Leo',
        'virgo': '‚ôç Virgo',
        'libra': '‚ôé Libra',
        'escorpio': '‚ôè Escorpio',
        'sagitario': '‚ôê Sagitario',
        'capricornio': '‚ôë Capricornio',
        'acuario': '‚ôí Acuario',
        'piscis': '‚ôì Piscis'
    };

    // Mostrar lista de signos si no se especifica uno
    if (!args[0]) {
        let signList = Object.entries(zodiacSigns)
            .map(([key, val]) => `‚ñ¢ ${usedPrefix}${command} ${key} - ${val}`)
            .join('\n');
        
        return conn.reply(m.chat, 
            `‚ú® *SIGNOS ZODIACALES DISPONIBLES* ‚ú®\n\n${signList}\n\n` +
            `Ejemplo: *${usedPrefix}${command} cancer*`, 
            m
        );
    }

    const sign = args[0].toLowerCase();
    
    // Verificar si el signo es v√°lido
    if (!zodiacSigns[sign]) {
        return conn.reply(m.chat, 
            `‚ùå Signo zodiacal no reconocido. Usa *${usedPrefix}${command}* para ver la lista de signos disponibles.`, 
            m
        );
    }

    try {
        // Indicar que el bot est√° escribiendo
        await conn.sendPresenceUpdate('composing', m.chat);

        // Obtener datos del hor√≥scopo
        const horoscopeData = await getHoroscopeData(sign);
        
        // Obtener imagen √∫nica
        const imageUrl = await getUniqueZodiacImage(sign);

        // Construir mensaje
        const message = `*${zodiacSigns[sign]}*\n` +
                       `üìÜ *Fecha:* ${horoscopeData.date}\n\n` +
                       `üîÆ *Predicci√≥n:*\n${horoscopeData.prediction}\n\n` +
                       `üí° *Consejo:* ${horoscopeData.advice}\n\n` +
                       `üçÄ *N√∫mero de la suerte:* ${horoscopeData.luckyNumber}`;

        // Enviar mensaje con imagen
        await conn.sendMessage(m.chat, {
            image: { url: imageUrl },
            caption: message,
            mentions: [m.sender]
        }, { quoted: m });

    } catch (error) {
        console.error('Error en comando hor√≥scopo:', error);
        // Usar la funci√≥n de respaldo correctamente definida
        await sendLocalHoroscope(m, conn, zodiacSigns[sign]);
    }
};

// Funci√≥n para obtener datos del hor√≥scopo
async function getHoroscopeData(sign) {
    try {
        // API funcional de hor√≥scopos
        const response = await fetch(`https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily?sign=${sign}&day=TODAY`);
        const data = await response.json();

        if (data?.data) {
            return {
                date: new Date().toLocaleDateString('es-ES', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                }),
                prediction: data.data.horoscope_data,
                advice: getRandomAdvice(),
                luckyNumber: Math.floor(Math.random() * 10) + 1
            };
        }
    } catch (e) {
        console.error('Error al obtener datos del hor√≥scopo:', e);
    }

    // Datos de respaldo si la API falla
    return {
        date: new Date().toLocaleDateString(),
        prediction: getRandomPrediction(sign),
        advice: getRandomAdvice(),
        luckyNumber: Math.floor(Math.random() * 10) + 1
    };
}

// Funci√≥n para obtener im√°genes √∫nicas
async function getUniqueZodiacImage(sign) {
    try {
        // Usar timestamp para evitar cach√©
        const timestamp = Date.now();
        const imageUrl = `https://source.unsplash.com/600x600/?${sign}-zodiac,astrology,stars&t=${timestamp}`;
        
        // Verificar si la imagen es nueva
        const response = await fetch(imageUrl, { method: 'HEAD' });
        const finalUrl = response.url;
        
        // Si la imagen no est√° en cach√©, usarla
        if (!imageCache.has(finalUrl)) {
            imageCache.set(finalUrl, true);
            
            // Limitar el cache a 30 im√°genes
            if (imageCache.size > 30) {
                const [firstKey] = imageCache.keys();
                imageCache.delete(firstKey);
            }
            
            return finalUrl;
        }
        
        // Si est√° en cach√©, intentar con par√°metros diferentes
        return `https://source.unsplash.com/600x600/?zodiac-${sign},constellation&t=${timestamp}`;
    } catch (e) {
        console.error('Error al obtener imagen:', e);
        return `https://i.imgur.com/${sign === 'cancer' ? '5Q9s5vY' : '7G7W9bX'}.jpg?t=${Date.now()}`;
    }
}

// Funci√≥n de respaldo mejorada
async function sendLocalHoroscope(m, conn, signoName) {
    try {
        const sign = signoName.split(' ')[1]?.toLowerCase() || 'cancer';
        const localData = {
            date: new Date().toLocaleDateString(),
            prediction: getRandomPrediction(sign),
            advice: getRandomAdvice(),
            luckyNumber: Math.floor(Math.random() * 10) + 1
        };
        
        const message = `*${signoName}*\n` +
                       `üìÜ *Fecha:* ${localData.date}\n\n` +
                       `üîÆ *Predicci√≥n:*\n${localData.prediction}\n\n` +
                       `üí° *Consejo:* ${localData.advice}\n\n` +
                       `üçÄ *N√∫mero de la suerte:* ${localData.luckyNumber}`;
        
        await conn.sendMessage(m.chat, {
            image: { url: await getUniqueZodiacImage(sign) },
            caption: message
        }, { quoted: m });
    } catch (e) {
        console.error('Error en sendLocalHoroscope:', e);
        await conn.reply(m.chat, 
            '‚ö†Ô∏è Ocurri√≥ un error al generar el hor√≥scopo. Por favor intenta nuevamente.', 
            m
        );
    }
}

// Funciones auxiliares
function getRandomAdvice() {
    const advices = [
        "Conf√≠a en tu intuici√≥n hoy",
        "Es buen d√≠a para tomar decisiones importantes",
        "Evita los conflictos innecesarios",
        "El amor puede llegar cuando menos lo esperes",
        "Cuida tu salud emocional",
        "Un viaje corto podr√≠a ser beneficioso",
        "La paciencia ser√° tu mayor virtud hoy"
    ];
    return advices[Math.floor(Math.random() * advices.length)];
}

function getRandomPrediction(sign) {
    const predictions = {
        cancer: [
            "Hoy es un buen d√≠a para conectar con tus emociones m√°s profundas.",
            "La luna favorece tu intuici√≥n, conf√≠a en tus corazonadas.",
            "Momento ideal para fortalecer los lazos familiares."
        ],
        default: [
            "Las estrellas indican que tendr√°s un d√≠a lleno de oportunidades.",
            "Este es un d√≠a clave para tu crecimiento personal.",
            "El universo est√° alineado a tu favor hoy."
        ]
    };
    
    const signPredictions = predictions[sign] || predictions.default;
    return signPredictions[Math.floor(Math.random() * signPredictions.length)];
}

// Configuraci√≥n del comando
handler.help = ['horoscopo <signo>'];
handler.tags = ['fun', 'horoscope'];
handler.command = /^(horoscopo|hor√≥scopo|signo|zodiaco)$/i;
handler.limit = false;

export default handler;
