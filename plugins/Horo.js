import fetch from 'node-fetch';

let handler = async (m, { conn, args, usedPrefix, command }) => {
    // Lista de signos v√°lidos con emojis
    const signos = {
        'aries': '‚ôà Aries',
        'tauro': '‚ôâ Tauro',
        'geminis': '‚ôä G√©minis',
        'cancer': '‚ôã C√°ncer', 
        'leo': '‚ôå Leo',
        'virgo': '‚ôç Virgo',
        'libra': '‚ôé Libra',
        'escorpio': '‚ôè Escorpio',
        'sagitario': '‚ôê Sagitario',
        'capricornio': '‚ôë Capricornio',
        'acuario': '‚ôí Acuario',
        'piscis': '‚ôì Piscis'
    };
    
    // Obtener el signo solicitado
    const signo = args[0]?.toLowerCase();
    
    // Verificar si el signo es v√°lido
    if (!signo || !signos[signo]) {
        let listaSignos = Object.entries(signos)
            .map(([key, val]) => `‚ñ¢ ${usedPrefix + command} ${key} - ${val}`)
            .join('\n');
        return conn.reply(m.chat, 
            `‚ú® *Hor√≥scopo Disponible*\n\n${listaSignos}\n\nEjemplo: ${usedPrefix + command} cancer`, 
            m
        );
    }
    
    try {
        // Mostrar estado de "escribiendo..."
        await conn.sendPresenceUpdate('composing', m.chat);
        
        // Obtener datos del hor√≥scopo desde una API confiable
        const horoscopeData = await getHoroscopeData(signo);
        
        // Construir mensaje con formato
        const message = `*${signos[signo]}*\n` +
                       `üìÖ *Fecha:* ${horoscopeData.date || new Date().toLocaleDateString()}\n\n` +
                       `üîÆ *Predicci√≥n:*\n${horoscopeData.prediction}\n\n` +
                       `üí´ *Consejo del d√≠a:* ${horoscopeData.advice || getRandomAdvice()}\n\n` +
                       `‚≠ê *N√∫mero de suerte:* ${horoscopeData.lucky_number || Math.floor(Math.random() * 10) + 1}`;
        
        // Enviar mensaje con imagen
        await conn.sendMessage(m.chat, {
            image: { url: horoscopeData.image },
            caption: message,
            mentions: [m.sender]
        }, { quoted: m });
        
    } catch (error) {
        console.error('Error en hor√≥scopo:', error);
        // Respuesta de respaldo si falla la API
        const backupMessage = `*${signos[signo]}*\n\n` +
                             `üìÖ Hoy es un d√≠a especial para ti.\n\n` +
                             `‚ú® Las estrellas indican que tendr√°s un d√≠a lleno de oportunidades.\n\n` +
                             `üí´ Consejo: Conf√≠a en tu intuici√≥n.`;
        
        await conn.sendMessage(m.chat, {
            image: { url: 'https://i.imgur.com/5Q9s5vY.jpg' },
            caption: backupMessage
        }, { quoted: m });
    }
};

// Nueva funci√≥n para obtener datos del hor√≥scopo
async function getHoroscopeData(sign) {
    try {
        // API alternativa m√°s confiable
        const response = await fetch(`https://aztro.sameerkumar.website/?sign=${sign}&day=today`, {
            method: 'POST'
        });
        const data = await response.json();
        
        // Obtener imagen relacionada
        const imageUrl = `https://source.unsplash.com/500x500/?${sign},zodiac,sign`;
        
        return {
            date: data.current_date,
            prediction: data.description,
            advice: data.mantra,
            lucky_number: data.lucky_number,
            image: imageUrl
        };
        
    } catch (error) {
        console.error('Error al obtener datos:', error);
        throw error;
    }
}

// Funci√≥n para consejos aleatorios
function getRandomAdvice() {
    const advices = [
        "Conf√≠a en tu intuici√≥n hoy",
        "Es buen d√≠a para tomar decisiones importantes",
        "Evita los conflictos innecesarios",
        "El amor puede llegar cuando menos lo esperes",
        "Cuida tu salud emocional",
        "Un viaje corto podr√≠a ser beneficioso",
        "La paciencia ser√° tu mayor virtud hoy"
    ];
    return advices[Math.floor(Math.random() * advices.length)];
}

handler.help = ['horoscopo <signo>'];
handler.tags = ['fun'];
handler.command = /^(horoscopo|hor√≥scopo|signo)$/i;
handler.limit = true;

export default handler;
