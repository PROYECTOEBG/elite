import { proto } from '@whiskeysockets/baileys';

let listas = {
  squad1: ['‚û¢', '‚û¢', '‚û¢', '‚û¢'],
  squad2: ['‚û¢', '‚û¢', '‚û¢', '‚û¢'],
  suplente: ['‚úî', '‚úî', '‚úî']
};

let handler = async (m, { conn }) => {
  const texto = 
`*EliteBot*
üéÆ *MODALIDAD:* CLK  
üëï *ROPA:* verde  

*Escuadra 1:*  
‚û° @user1
‚û° @user2
‚û° @user3
‚û° @user4

*Escuadra 2:*  
‚û° @user5
‚û° @user6
‚û° @user7
‚û° @user8

*SUPLENTE:*  
‚û° @user9
‚û° @user10
‚û° @user11

*BOLLLOBOT / MELDEXZZ.*`;

  try {
    await conn.sendMessage(m.chat, {
      text: texto,
      buttons: [
        { buttonId: 'squad1', buttonText: { displayText: '‚öîÔ∏è Escuadra 1' }, type: 1 },
        { buttonId: 'squad2', buttonText: { displayText: 'üó°Ô∏è Escuadra 2' }, type: 1 },
        { buttonId: 'suplente', buttonText: { displayText: 'üîÑ Suplente' }, type: 1 },
        { buttonId: 'limpiar', buttonText: { displayText: 'üóëÔ∏è Limpiar lista' }, type: 1 }
      ],
      footer: 'üë• Selecciona una opci√≥n:',
      headerType: 1
    });
  } catch (e) {
    console.error(e);
    m.reply(texto);
  }
};

handler.command = /^(listaff|lista)$/i;
export default handler;

export async function before(m, { conn }) {
  try {
    if (!m.message?.buttonsResponseMessage?.selectedButtonId) return;
    
    const user = m.sender;
    const username = '@' + user.split('@')[0];
    const buttonId = m.message.buttonsResponseMessage.selectedButtonId;

    // Reaccionamos al mensaje
    await conn.sendMessage(m.chat, { react: { text: '‚úÖ', key: m.key }});

    let newText = 
`*EliteBot*
üéÆ *MODALIDAD:* CLK  
üëï *ROPA:* verde  

*Escuadra 1:*  
${buttonId === 'squad1' ? `‚û° ${username}` : '‚û° @user1'}
‚û° @user2
‚û° @user3
‚û° @user4

*Escuadra 2:*  
${buttonId === 'squad2' ? `‚û° ${username}` : '‚û° @user5'}
‚û° @user6
‚û° @user7
‚û° @user8

*SUPLENTE:*  
${buttonId === 'suplente' ? `‚û° ${username}` : '‚û° @user9'}
‚û° @user10
‚û° @user11

*BOLLLOBOT / MELDEXZZ.*`;

    // Enviamos mensaje de confirmaci√≥n
    await conn.sendMessage(m.chat, {
      text: `‚úÖ Te has unido a ${buttonId === 'squad1' ? 'Escuadra 1' : buttonId === 'squad2' ? 'Escuadra 2' : 'Suplente'}`,
      mentions: [user]
    });

    // Enviamos la lista actualizada
    await conn.sendMessage(m.chat, {
      text: newText,
      buttons: [
        { buttonId: 'squad1', buttonText: { displayText: '‚öîÔ∏è Escuadra 1' }, type: 1 },
        { buttonId: 'squad2', buttonText: { displayText: 'üó°Ô∏è Escuadra 2' }, type: 1 },
        { buttonId: 'suplente', buttonText: { displayText: 'üîÑ Suplente' }, type: 1 },
        { buttonId: 'limpiar', buttonText: { displayText: 'üóëÔ∏è Limpiar lista' }, type: 1 }
      ],
      footer: 'üë• Selecciona una opci√≥n:',
      headerType: 1,
      mentions: [user]
    });
  } catch (error) {
    console.error(error);
    await m.reply('‚ùå Ocurri√≥ un error al procesar tu selecci√≥n');
  }
}

async function enviarLista(conn, jid, mentions = []) {
  // Obtener todos los usuarios mencionados
  const allMentions = [...new Set([
    ...mentions,
    ...listas.squad1.filter(p => p !== '‚û¢').map(p => p.replace('@', '') + '@s.whatsapp.net'),
    ...listas.squad2.filter(p => p !== '‚û¢').map(p => p.replace('@', '') + '@s.whatsapp.net'),
    ...listas.suplente.filter(p => p !== '‚úî').map(p => p.replace('@', '') + '@s.whatsapp.net')
  ])];

  const texto = 
`*EliteBot*
üéÆ *MODALIDAD:* CLK  
üëï *ROPA:* verde  

*Escuadra 1:*  
${listas.squad1.map(p => `‚û° ${p}`).join('\n')}  

*Escuadra 2:*  
${listas.squad2.map(p => `‚û° ${p}`).join('\n')}  

*SUPLENTE:*  
${listas.suplente.map(p => `‚û° ${p}`).join('\n')}  

*BOLLLOBOT / MELDEXZZ.*`;

  const buttons = [
    {
      name: "quick_reply",
      buttonParamsJson: JSON.stringify({ display_text: "Escuadra 1", id: "squad1" })
    },
    {
      name: "quick_reply",
      buttonParamsJson: JSON.stringify({ display_text: "Escuadra 2", id: "squad2" })
    },
    {
      name: "quick_reply",
      buttonParamsJson: JSON.stringify({ display_text: "Suplente", id: "suplente" })
    },
    {
      name: "quick_reply",
      buttonParamsJson: JSON.stringify({ display_text: "Limpiar lista", id: "limpiar" })
    }
  ];

  const mensaje = generateWAMessageFromContent(jid, {
    viewOnceMessage: {
      message: {
        messageContextInfo: { 
          deviceListMetadata: {},
          mentionedJid: allMentions
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: { text: texto },
          footer: { text: "Selecciona una opci√≥n:" },
          nativeFlowMessage: { buttons }
        })
      }
    }
  }, {});

  await conn.relayMessage(jid, mensaje.message, { messageId: mensaje.key.id });
}
