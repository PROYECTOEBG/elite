const commandTracker = new Map();
const TRACKER_TTL = 60000; // 1 minuto

export async function all(m) {
  // Validaci√≥n inicial del mensaje
  if (!m || !m.text || typeof m.text !== 'string' || m.isBaileys || m.fromMe) return;

  // Detecci√≥n del prefijo
  const prefix = global.prefix instanceof RegExp ? global.prefix : /^[\.\!\#\/]/i;
  const prefixMatch = m.text.match(prefix);
  if (!prefixMatch) return;

  const usedPrefix = prefixMatch[0];
  const cmd = m.text.slice(usedPrefix.length).trim().split(/\s+/)[0]?.toLowerCase();
  if (!cmd) return;

  // Prevenci√≥n de spam
  const trackerId = `${m.chat}_${cmd}`;
  if (commandTracker.has(trackerId)) return;

  // Verificaci√≥n de comandos existentes
  let commandExists = false;
  for (const name in global.plugins) {
    const plugin = global.plugins[name];
    if (!plugin?.command) continue;

    const commands = Array.isArray(plugin.command)
      ? plugin.command.map(c => String(c).toLowerCase())
      : [String(plugin.command).toLowerCase()];

    if (commands.includes(cmd)) {
      commandExists = true;
      break;
    }
  }

  if (!commandExists) {
    commandTracker.set(trackerId, true);
    setTimeout(() => commandTracker.delete(trackerId), TRACKER_TTL);

    // SOLUCI√ìN DEFINITIVA PARA EL JID
    const getValidJid = (input) => {
      if (!input) return null;
      
      // Si es un objeto, intentamos extraer el JID
      if (typeof input === 'object') {
        return input.id || input.jid || input.from || null;
      }
      
      // Si es string, verificamos formato
      if (typeof input === 'string') {
        // Limpieza b√°sica del JID
        let cleaned = input.split('@')[0].replace(/\D+/g, '');
        if (cleaned.length > 0) {
          return `${cleaned}@s.whatsapp.net`;
        }
      }
      
      return null;
    };

    // Obtenemos JID con m√∫ltiples fallbacks
    let jid = getValidJid(m.sender) || 
              getValidJid(m.chat) || 
              getValidJid(m.from) || 
              getValidJid(m.key?.remoteJid) || 
              'unknown@s.whatsapp.net';

    // Creaci√≥n segura de la menci√≥n
    const mentionId = jid.split('@')[0];
    const mention = mentionId ? `@${mentionId}` : '@unknown';

    // Construcci√≥n del mensaje
    const response = `‚ú¶ ¬°Atenci√≥n ${mention}! ‚ú¶\n\n` +
      `El comando *${usedPrefix}${cmd}* no est√° registrado.\n` +
      `‚ñ∂ Verifica la ortograf√≠a\n` +
      `‚ñ∂ Usa *${usedPrefix}help* para ayuda\n\n` +
      `üîπ EliteBot Global üîπ`;

    try {
      // Env√≠o con validaci√≥n final
      if (jid.endsWith('@s.whatsapp.net') || jid.endsWith('@g.us')) {
        await m.reply(response, {
          mentions: [jid]
        });
      } else {
        console.error('JID no v√°lido detectado:', jid);
        await m.reply(response); // Env√≠o sin menci√≥n como fallback
      }
    } catch (error) {
      console.error('Error al enviar mensaje:', error);
      // Fallback final sin usar mentions
      await conn.sendMessage(m.chat, { text: response });
    }
  }
}
